Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2


Resources:
  SeVPC01:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.1.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: AWS-Seoul-internal-VPC01

  SeIGW01:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-IGW
  
  SeIGW01Att:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref SeIGW01
      VpcId: !Ref SeVPC01

  SePublicRT01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeVPC01 
      Tags:
        - Key: Name
          Value: AWS-Seoul-Public-RT01

  SePublicRoute:
    Type: AWS::EC2::Route
    DependsOn: SeIGW01Att
    Properties:
      RouteTableId: !Ref SePublicRT01
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SeIGW01

  SePublicSN01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC01 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-Public-SN01 

  SePublicSN02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC01 
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-Public-SN02
  
  SePub2licSN01RTAtt:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SePublicRT01
      SubnetId: !Ref SePublicSN01

  SePublicSN0RTAtt:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SePublicRT01
      SubnetId: !Ref SePublicSN02

  SePublicENI01:
    Type: AWS::EC2::NetworkInterface
    Properties:
       SubnetId: !Ref SePublicSN01
       Description: AWS-Seoul-NATinstance 01 eth0
       GroupSet:
       - !Ref SePublicSG01
       PrivateIpAddress: 10.1.1.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: AWS-Seoul-Public-ENI01 eth0
             
  SePublicENI02:
    Type: AWS::EC2::NetworkInterface
    Properties:
       SubnetId: !Ref SePublicSN02
       Description: AWS-Seoul-NATinstance 02 eth0
       GroupSet:
       - !Ref SePublicSG01
       PrivateIpAddress: 10.1.2.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: AWS-Seoul-Public-ENI02 eth0
  
  SePublicNATEC201:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: SePublicNATEC201
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref SePublicENI01
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname Seoul-AWS-NATInstance1
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.eth0.send_redirects=0
          EOF
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables && systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save
          

  SePublicNATEC202:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: SePublicNATEC202
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref SePublicENI02
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname Seoul-AWS-NATInstance2
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.eth0.send_redirects=0
          EOF
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables && systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

          
          
  SePublicSG01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeVPC01 
      GroupDescription: AWS-Public-SG01
      Tags:
      - Key : Name
        Value : AWS-Public-SG01
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: '-1'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

#-----AWS-Seoul-internal-VPC01-Private-RT02,03-Route-SN03,04-----#

  SePrivateRT02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeVPC01 
      Tags:
        - Key: Name
          Value: AWS-Seoul-Private-RT02

  SePrivateRT03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeVPC01 
      Tags:
        - Key: Name
          Value: AWS-Seoul-Private-RT03
  
  SePrivateRoute02:
    Type: AWS::EC2::Route
    DependsOn: SePublicNATEC201
    Properties:
      RouteTableId: !Ref SePrivateRT02
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref SePublicNATEC201
  
  SePrivateRoute03:
    Type: AWS::EC2::Route
    DependsOn: SePublicNATEC202
    Properties:
      RouteTableId: !Ref SePrivateRT03
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref SePublicNATEC202

  SePrivateSN03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC01 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-Private-SN03

  SePrivateSN04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC01 
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-Private-SN04 
  
  SeRrivateSN03RT02Att:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SePrivateRT02
      SubnetId: !Ref SePrivateSN03

  SeRrivateSN04RT03Att:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SePrivateRT03
      SubnetId: !Ref SePrivateSN04

#-----웹서버 EC2--------#
  SePrivateWebEC203:
    Type: AWS::EC2::Instance
    DependsOn: SePrivateRoute02
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-Seoul-Private-Web-EC203
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SePrivateSN03
          GroupSet:
          - !Ref SePrivateWebSG02
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Seoul-AWS-WebSrv1
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd lynx
          systemctl start httpd && systemctl enable httpd
          mkdir /var/www/inc
          curl -o /var/www/inc/dbinfo.inc https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/dbinfo.inc
          curl -o /var/www/html/db.php https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/db.php
          rm -rf /var/www/html/index.html
          echo "<h1>CloudNet@ FullLab - SeoulRegion - Websrv1</h1>" > /var/www/html/index.html
          curl -o /opt/pingcheck.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/pingchecker.sh
          chmod +x /opt/pingcheck.sh
          cat <<EOT>> /etc/crontab
          */3 * * * * root /opt/pingcheck.sh
          EOT
          echo "1" > /var/www/html/HealthCheck.txt
          
  SePrivateWebEC204:
    Type: AWS::EC2::Instance
    DependsOn: SePrivateRoute03
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-Seoul-Private-Web-EC204
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SePrivateSN04
          GroupSet:
          - !Ref SePrivateWebSG02
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64: |
                UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Seoul-AWS-WebSrv2
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd lynx
          systemctl start httpd && systemctl enable httpd
          mkdir /var/www/inc
          curl -o /var/www/inc/dbinfo.inc https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/dbinfo.inc
          curl -o /var/www/html/db.php https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/db.php
          rm -rf /var/www/html/index.html
          echo "<h1>CloudNet@ FullLab - SeoulRegion - Websrv2</h1>" > /var/www/html/index.html
          curl -o /opt/pingcheck.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/pingchecker.sh
          chmod +x /opt/pingcheck.sh
          cat <<EOT>> /etc/crontab
          */3 * * * * root /opt/pingcheck.sh
          EOT
          echo "1" > /var/www/html/HealthCheck.txt

  SePrivateWebSG02:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeVPC01 
      GroupDescription: VPC1-Seoul-AWS-WebSrv-SecurityGroup
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-WebSrv-SecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

#------연동 서브넷 (아니 뭔 서브넷이 6개냐)------#

  SeLinkageSN05:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC01 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.5.0/24
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-Linkage-SN05

  SeLinkageSN06:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC01 
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.6.0/24
      Tags:
        - Key: Name
          Value: AWS-Seoul-internal-Linkage-SN06

#------------------AWS-Seoul-ALB-----------------#
  SeALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: AWS-Seoul-ALB
      SecurityGroups:
        - !Ref SeALBSG03
      Subnets:
        - !Ref SePublicSN01
        - !Ref SePublicSN02

  SeALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: SePrivateWebEC204
    Properties:
      Name: SeALBTG
      Port: 80
      Protocol: HTTP     
      VpcId: !Ref SeVPC01 
      Targets:
        - Id: !Ref SePrivateWebEC203
          Port: 80
        - Id: !Ref SePrivateWebEC204
          Port: 80
      Tags:
      - Key : Name
        Value : AWS-Seoul-ALBTG
  
  SeALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SeALBTG
      LoadBalancerArn: !Ref SeALB
      Port: 80
      Protocol: HTTP

  SeALBSG03:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeVPC01 
      GroupDescription: AWS-Seoul-ALB-SG03
      Tags:
      - Key : Name
        Value : AWS-Seoul-ALB-SG03
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

#------SeVPC-EIP1-------#
  SeVPC01EIP01:
      Type: AWS::EC2::EIP
      Properties:
          Domain: vpc

#----------TGW----------#
  SeTGW01:
    Type: AWS::EC2::TransitGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-Seoul-TGW01

  SeTGW01Att01:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn: SeVPC01 
    Properties:
      VpcId: !Ref SeVPC01
      SubnetIds:
      - !Ref SeLinkageSN05
      - !Ref SeLinkageSN06
      TransitGatewayId: !Ref SeTGW01
      Tags:
        - Key: Name
          Value: AWS-TGW01-Seoul-VPC01-Att

  SeTGWRoute04:
    Type: AWS::EC2::Route
    DependsOn: SeTGW01Att01
    Properties:
      RouteTableId: !Ref SePrivateRT02
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref SeTGW01

  SeTGWRoute05:
    Type: AWS::EC2::Route
    DependsOn: SeTGW01Att01
    Properties:
      RouteTableId: !Ref SePrivateRT03
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref SeTGW01

#------CGW--------#

  SeCGW01:
    Type: "AWS::EC2::CustomerGateway"
    DependsOn: SeVPC01EIP01
    Properties:
        Type: ipsec.1
        BgpAsn: 65000
        IpAddress:
            Ref: SeVPC01EIP01
        Tags:
          - Key: Name
            Value: AWS-Seoul-CGW01

  SeVpnConnection:
    Type: "AWS::EC2::VPNConnection"
    Properties:
        Type: ipsec.1
        StaticRoutesOnly: true
        CustomerGatewayId:
            !Ref SeCGW01
        TransitGatewayId:
            !Ref SeTGW01
        VpnTunnelOptionsSpecifications:
            - PreSharedKey: cloudneta
            - PreSharedKey: cloudneta
        Tags:
            - Key: Name
              Value: AWS-Seoul-VPNConnection-IDC

# GA
  GA:
    Type: AWS::GlobalAccelerator::Accelerator
    Properties:
      Name: !Sub '${AWS::StackName}'
      Enabled: true
      IpAddressType: IPV4

  GAListener:
    Type: AWS::GlobalAccelerator::Listener
    Properties:
      AcceleratorArn: !Ref GA
      Protocol: TCP
      PortRanges:
        - FromPort: 80
          ToPort: 80

  GAEPGroup:
    Type: AWS::GlobalAccelerator::EndpointGroup
    DependsOn: SeALB
    Properties:
      ListenerArn: !Ref GAListener
      EndpointGroupRegion: !Ref AWS::Region
      HealthCheckProtocol: HTTP
      HealthCheckPath: '/HealthCheck.txt'
      HealthCheckIntervalSeconds: 10
      ThresholdCount: 5
      EndpointConfigurations:
        - EndpointId: !Ref SeALB

# #---Private-DNS----구성
  PrivateDNS1:
    Type: AWS::Route53::HostedZone
    DependsOn: SeVPC01
    Properties:
      HostedZoneConfig:
        Comment: Private hosted zone for awsseoul.internal
      Name: awsseoul.internal
      VPCs:
        - VPCId: !Ref SeVPC01 
          VPCRegion: ap-northeast-2
      HostedZoneTags:
        - Key: Name
          Value: aws-seoul-internal-domain

  DNSRecordSePrivateWebEC203:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateDNS1
      Comment: DNS name for AWS Seoul WEBSRV1 instance.
      Name: websrv1.awsseoul.internal
      Type: A
      TTL: 60
      ResourceRecords:
      - !GetAtt SePrivateWebEC203.PrivateIp

  DNSRecordSePrivateWebEC204:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateDNS1
      Comment: DNS name for AWS Seoul WEBSRV2 instance.
      Name: websrv2.awsseoul.internal
      Type: A
      TTL: 60
      ResourceRecords:
      - !GetAtt SePrivateWebEC204.PrivateIp

#-----------Route53-----------------#
  InboundResolverEP:
    Type : AWS::Route53Resolver::ResolverEndpoint
    Properties :
      Direction : Inbound
      IpAddresses :
        - SubnetId: !Ref SePrivateSN03
          Ip: 10.1.3.250
        - SubnetId: !Ref SePrivateSN04
          Ip: 10.1.4.250
      Name : AWS Seoul Inbound Endpoint
      SecurityGroupIds :
        - !Ref SeResolverSG04
      Tags :
        - Key: Name
          Value: AWSseoulInboundEP

  OutboundResolverEP:
    Type : AWS::Route53Resolver::ResolverEndpoint
    Properties :
      Direction : Outbound
      IpAddresses :
        - SubnetId: !Ref SePrivateSN03
          Ip: 10.1.3.251
        - SubnetId: !Ref SePrivateSN04
          Ip: 10.1.4.251
      Name : AWS Seoul Outbound Endpoint
      SecurityGroupIds :
        - !Ref SeResolverSG04
      Tags :
        - Key: Name
          Value: AWSseoulOutboundEP

  ResolverRule1IDCSe:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      RuleType: FORWARD
      DomainName: idcseoul.internal
      Name: idc seoul rule
      ResolverEndpointId: !Ref OutboundResolverEP
      Tags:
        - Key: Name
          Value: idc seoul rule
      TargetIps:
        - Ip : 10.2.1.200
          Port : 53

  ResolverRule2AWSSing:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      RuleType: FORWARD
      DomainName: awssingapore.internal
      Name: aws singapore rule
      ResolverEndpointId: !Ref OutboundResolverEP
      Tags:
        - Key: Name
          Value: aws singapore rule
      TargetIps:
        - Ip : 10.3.3.250
          Port : 53
        - Ip : 10.3.4.250
          Port : 53

  ResolverRule3IDCSing:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      RuleType: FORWARD
      DomainName: idcsingapore.internal
      Name: idc singapore rule
      ResolverEndpointId: !Ref OutboundResolverEP
      Tags:
        - Key: Name
          Value: idc singapore rule
      TargetIps:
        - Ip : 10.4.1.200
          Port : 53

  ResolverRuleAss1:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: RuleAss1
      ResolverRuleId: !Ref ResolverRule1IDCSe
      VPCId: !Ref SeVPC01

  ResolverRuleAss2:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: RuleAss2
      ResolverRuleId: !Ref ResolverRule2AWSSing
      VPCId: !Ref SeVPC01

  ResolverRuleAss3:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: RuleAss3
      ResolverRuleId: !Ref ResolverRule3IDCSing
      VPCId: !Ref SeVPC01

  SeResolverSG04:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SeVPC01 
      GroupDescription: AWS-Seoul-Resolver-SG04
      Tags:
      - Key : Name
        Value : AWS-Seoul-Resolver-SG04
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 10.0.0.0/8
  

#-------자 여기서 부터 IDC 서울이야~~~--------#  
  IDCSeVPC02:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.2.0.0/16
     EnableDnsSupport: false
     EnableDnsHostnames: false
     Tags:
      - Key: Name
        Value: IDC-VPC02-Seoul

  IDCSeVPC02DNSOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: idcseoul.internal
      DomainNameServers:
        - 10.2.1.200
        - 8.8.8.8
      NtpServers:
        - 203.248.240.140
        - 168.126.3.6
      # 시간 동기화 
      Tags:
        - Key: Name
          Value: IDC-VPC02-Seoul-DHCPOptions
          
  IDCSeVPC02DNSOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref IDCSeVPC02DNSOptions
      VpcId: !Ref IDCSeVPC02

  IDCSeVPC02IGW01:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IDC-Seoul-VPC02-IGW01

  IDCIGWAtt01:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCSeVPC02IGW01
      VpcId: !Ref IDCSeVPC02
  
#-------IDC-RT + Route--------#
  
  IDCSeRT01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCSeVPC02
      Tags:
        - Key: Name
          Value: IDC-Seoul-VPC02-RT
  
  IDCSeRoute01:
    Type: AWS::EC2::Route
    DependsOn: IDCIGWAtt01
    Properties:
      RouteTableId: !Ref IDCSeRT01
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCSeVPC02IGW01

  #--퍼블릭 서브넷임 ---# CGW ---
  IDCSeVPC02Subnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCSeVPC02
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.2.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: IDC-Seoul-Subnet01

  IDCSeVPC02Subnet01RTAss:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCSeRT01
      SubnetId: !Ref IDCSeVPC02Subnet01

  IDCSeVPC02Route02:
    Type: AWS::EC2::Route
    DependsOn: IDCCGWEC201
    Properties:
      RouteTableId: !Ref IDCSeRT01
      DestinationCidrBlock: 10.0.0.0/8
      InstanceId: !Ref IDCCGWEC201

  IDCSeCGWEC201ENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
        SubnetId: !Ref IDCSeVPC02Subnet01
        Description: IDC Seoul Instance1 eth0
        GroupSet:
        - !Ref IDCCGWSG01
        PrivateIpAddress: 10.2.1.240
        SourceDestCheck: false
        Tags:
            - Key: Name
              Value: IDC-Seoul-Instance1 eth0
    
  VPCAssociateEIP01:
      DependsOn: IDCSeCGWEC201ENI
      Type: AWS::EC2::EIPAssociation
      Properties:
          AllocationId: !GetAtt SeVPC01EIP01.AllocationId
          NetworkInterfaceId: !Ref IDCSeCGWEC201ENI
    
  IDCCGWEC201:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-Seoul-CGW-EC201
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref IDCSeCGWEC201ENI
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Seoul-IDC-CGW
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          net.ipv4.conf.default.accept_source_route = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/8_lab_vpnconfig_seoul.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh

  

  IDCDBEC202:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Seoul-IDC-DB
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCSeVPC02Subnet01
          GroupSet:
          - !Ref IDCDBSG02
          PrivateIpAddress: 10.2.1.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Seoul-IDC-DB
          yum install -y mariadb-server mariadb lynx
          systemctl start mariadb && systemctl enable mariadb
          echo -e "\n\nqwe123\nqwe123\ny\ny\ny\ny\n" | /usr/bin/mysql_secure_installation
          mysql -uroot -pqwe123 -e "CREATE DATABASE sample; GRANT ALL PRIVILEGES ON *.* TO 'gasida'@'%' IDENTIFIED BY 'qwe123'; GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'%' IDENTIFIED BY 'qwe123'; flush privileges;"
          mysql -uroot -pqwe123 -e "USE sample;CREATE TABLE EMPLOYEES (ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,NAME VARCHAR(45),ADDRESS VARCHAR(90));"
          cat <<EOT> /etc/my.cnf
          [mysqld]
          datadir=/var/lib/mysql
          socket=/var/lib/mysql/mysql.sock
          symbolic-links=0
          log-bin=mysql-bin
          general_log=ON
          skip-character-set-client-handshake
          character-set-server=utf8
          collation-server=utf8_unicode_ci
          server-id=1
          [mysqld_safe]
          log-error=/var/log/mariadb/mariadb.log
          pid-file=/var/run/mariadb/mariadb.pid
          !includedir /etc/my.cnf.d
          EOT
          systemctl restart mariadb
          cat <<EOT> /home/ec2-user/list.txt
          10.1.3.100
          websrv1.awsseoul.internal
          10.1.4.100
          websrv2.awsseoul.internal
          10.2.1.100
          dbsrv.idcseoul.internal
          10.2.1.200
          dnssrv.idcseoul.internal
          10.3.3.100
          websrv1.awssingapore.internal
          10.4.1.100
          dbsrv.idcsingapore.internal
          10.4.1.200
          dnssrv.idcsingapore.internal
          EOT
          curl -o /home/ec2-user/pingall.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/pingall.sh --silent
          chmod +x /home/ec2-user/pingall.sh

  IDCDNSEC203:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-07b7be0099924913e
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Seoul-IDC-DNSSRV
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCSeVPC02Subnet01
          GroupSet:
          - !Ref IDCDNSSG03
          PrivateIpAddress: 10.2.1.200
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Seoul-IDC-DNSSRV
          sed -i "s/^127.0.0.1 localhost/127.0.0.1 localhost VPC2-Seoul-IDC-DNSSRV/g" /etc/hosts
          apt-get update -y
          apt-get install bind9 bind9-doc language-pack-ko -y
        
          cat <<EOF> /etc/bind/named.conf.options
          options {
             directory "/var/cache/bind";
             recursion yes;
             allow-query { any; };
             forwarders {
                   8.8.8.8;
                    };
             forward only;
             auth-nxdomain no;
          };
          zone "awsseoul.internal" {
              type forward;
              forward only;
              forwarders { 10.1.3.250; 10.1.4.250; };
          };
          zone "awssingapore.internal" {
              type forward;
              forward only;
              forwarders { 10.3.3.250; 10.3.4.250; };
          };
          zone "idcsingapore.internal" {
              type forward;
              forward only;
              forwarders { 10.4.1.200; };
          };
          EOF

          # named.conf.local
          cat <<EOF> /etc/bind/named.conf.local
          zone "idcseoul.internal" {
              type master;
              file "/etc/bind/db.idcseoul.internal"; # zone file path
          };

          zone "2.10.in-addr.arpa" {
              type master;
              file "/etc/bind/db.10.2";  # 10.2.0.0/16 subnet
          };
          EOF

          # db.idcseoul.internal
          cat <<EOF> /etc/bind/db.idcseoul.internal
          \$TTL 30
          @ IN SOA idcseoul.internal. root.idcseoul.internal. (
            2019122114 ; serial
            3600       ; refresh
            900        ; retry
            604800     ; expire
            86400      ; minimum ttl
          )

          ; dns server
          @      IN NS ns1.idcseoul.internal.

          ; ip address of dns server
          ns1    IN A  10.2.1.200

          ; Hosts
          dbsrv   IN A  10.2.1.100
          dnssrv   IN A  10.2.1.200
          EOF
          # db.10.2
          cat <<EOF> /etc/bind/db.10.2
          \$TTL 30
          @ IN SOA idcseoul.internal. root.idcseoul.internal. (
            2019122114 ; serial
            3600       ; refresh
            900        ; retry
            604800     ; expire
            86400      ; minimum ttl
          )

          ; dns server
          @      IN NS ns1.idcseoul.internal.

          ; ip address of dns server
          3      IN PTR  ns1.idcseoul.internal.

          ; A Record list
          100.1    IN PTR  dbsrv.idcseoul.internal.
          200.1    IN PTR  dnssrv.idcseoul.internal.
          EOF
          # bind9 service start
          systemctl start bind9 && systemctl enable bind9


  IDCCGWSG01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCSeVPC02
      GroupDescription: IDC-CGWInstance-SG01
      Tags:
      - Key : Name
        Value : IDC-CGWInstance-SG01
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp # IPSec
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp # IPSec
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp # IPSec
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp  # NAT 보안
        FromPort: '4500' 
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: '-1'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  IDCDBSG02:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCSeVPC02
      GroupDescription: IDC-DB-SG02
      Tags:
      - Key : Name
        Value : IDC-DB-SG02
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp    # MySQL
        FromPort: '3306'  
        ToPort: '3306'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  IDCDNSSG03:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IDCSeVPC02
      GroupDescription: IDC-DNSSRV-SG03
      Tags:
      - Key : Name
        Value : IDC-DNSSRV-SG03
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp   # DNS 
        FromPort: '53'
        ToPort: '53'
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp   # DNS
        FromPort: '53'
        ToPort: '53'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

Outputs:
  GAListenerARN:
    Description: Global Accelerator Arn
    Value: !GetAtt GAListener.ListenerArn
  SeoulTransitGatewayID:
    Description: Seoul TransitGateway ID
    Value: !Ref SeTGW01
  CGWInstance:
    Description: Public IP assigned to VPC2 Instance1 eth0 interface
    Value: !GetAtt IDCCGWEC201.PublicIp
  MasterDBInstance:
    Description: Public IP assigned to VPC2 Instance2 eth0 interface
    Value: !GetAtt IDCDBEC202.PublicIp